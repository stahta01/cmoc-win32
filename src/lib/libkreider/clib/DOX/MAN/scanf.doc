

        SCANF(3C)        Kreider OS-9 C Library        SCANF(3C)


        NNAAMMEE 

             scanf, fscanf, sscanf - convert formatted input

        SSYYNNOOPPSSIISS 

             #include <stdio.h>

             int scanf (format [, pointer...])
             char *format;

             int fscanf (fp, format [, pointer...])
             FILE *fp;
             char *format;

             int sscanf (s, format [, pointer...])
             char *s, *format;

        DDEESSCCRRIIPPTTIIOONN 

             The SSCCAANNFF subroutine reads from the standard input stream 
             _s_t_d_i_n.  The FFSSCCAANNFF subroutine reads from the named input 
             _f_p.  The SSSSCCAANNFF subroutine reads from the character string 
             _s.  Each function reads characters, interprets them 
             according to a format, and stores the results in its 
             arguments.  Each expects, as arguments, a control string 
             _f_o_r_m_a_t described below, and a set of _p_o_i_n_t_e_r arguments 
             indicating where the converted input should be stored.  

             The control string usually contains conversion 
             specifications, which are used to direct interpretation of 
             input sequences.  The control string may contain: 

                  White-space characters
                  which, except in two cases described later,
                  cause input to be read up to the next
                  non-white-space character.

             An ordinary character (not %), which must match the next 
             character of the input stream.  

             Conversion specifications, consisting of the character % , 
             an optional assignment suppressing character (** , an 
             optional numerical maximum field width, an optional l " 
             (ell) or " h indicating the size of the receiving variable, 
             and a conversion code.  

             A conversion specification directs the conversion of the 
             next input field; the result is placed in the variable 
             pointed to by the corresponding argument, unless assignment 
             suppression was indicated by (** .  The suppression of 
             assignment provides a way of describing an input field 
             which is to be skipped.  An input field is defined as a 
             string of non-space characters; it extends to the next 




                                                                




        SCANF(3C)        Kreider OS-9 C Library        SCANF(3C)


             inappropriate character or until the field width, if 
             specified, is exhausted.  For all descriptors except 
             left-bracket ([) and c, white space leading an input field 
             is ignored.  

             The conversion code indicates the interpretation of the 
             input field.  The corresponding pointer argument must 
             usually be a restricted type.  For a suppressed field, a 
             pointer argument is not given.  The following conversion 
             codes are legal: 

             % A single % is expected in the input at this point; no 
             assignment is done.  

             d A decimal integer is expected; the corresponding argument 
             should be an integer pointer.  

             u An unsigned decimal integer is expected; the 
             corresponding argument should be an unsigned integer 
             pointer.  

             o An octal integer is expected; the corresponding argument 
             should be an integer pointer.  

             x A hexadecimal integer is expected; the corresponding 
             argument should be an integer pointer.  

             \f3e\fP,\f3ffP,\f3g\fP A floating point number is expected; 
             the next field is converted accordingly and stored through 
             the corresponding argument, which should be a pointer to a 
             float .  The input format for floating point numbers is an 
             optionally signed string of digits, possibly containing a 
             radix character, followed by an optional exponent field 
             consisting of an E or an e , followed by an optional (pl, 
             -, or space, followed by an integer.  

             s A character string is expected; the corresponding 
             argument should be a character pointer pointing to an array 
             of characters large enough to accept the string and a 
             terminating e0 , which is added automatically.  The input 
             field is terminated by a white-space character.  

             c A character is expected; the corresponding argument 
             should be a character pointer.  The normal skip over white 
             space is suppressed in this case; to read the next 
             non-space character, use %1s .  If a field width is given, 
             the corresponding argument should refer to a character 
             array; the indicated number of characters is read.  


             [ Indicates string data and the normal skip over leading 
             white space is suppressed.  The left bracket is followed by 
             a set of characters, which can be called the scanset, and a 
             right bracket.  The input field is the maximal sequence of 




                                                                




        SCANF(3C)        Kreider OS-9 C Library        SCANF(3C)


             input characters consisting entirely of characters in the 
             scanset.  The circumflex ^, when it appears as the first 
             character in the scanset, serves as a complement operator 
             and redefines the scanset as the set of all characters not 
             contained in the remainder of the scanset string.  There 
             are some conventions used in the construction of the 
             scanset.  A range of characters may be represented by the 
             construct first-last , thus [0123456789] may be expressed 
             [0-9].  

             Using this convention, first must be lexically less than or 
             equal to last , or else the dash stands for itself.  The 
             dash also stands for itself whenever it is the first or the 
             last character in the scanset.  To include the right square 
             bracket as an element of the scanset, it must appear as the 
             first character (possibly preceded by a circumflex) of the 
             scanset, and in this case it is not syntactically 
             interpreted as the closing bracket.  The corresponding 
             argument must point to a character array large enough to 
             hold the data field and the terminating fB\0fR, which is 
             added automatically.  At least one character must match for 
             this conversion to be considered successful.  

             The conversion characters _d, _u, _o, and _x may be capitalized 
             or preceded by _l or _h to indicate that a pointer to long or 
             to short, rather than to int, is in the argument list.  
             Similarly, the conversion characters _e, _f, and _g may be 
             capitalized or preceded by _l to indicate that a pointer to 
             double, rather than to float, is in the argument list.  The 
             "l" or "h" modifier is ignored for other conversion 
             characters.  

             The SSCCAANNFF subroutine conversion terminates at EOF, at the 
             end of the control string, or when an input character 
             conflicts with the control string.  In the latter case, the 
             offending character is left unread in the input stream.  

             The SSCCAANNFF subroutine returns the number of successfully 
             matched and assigned input items.  This number can be zero 
             in the event of an early conflict between an input 
             character and the control string.  If the input ends before 
             the first conflict or conversion, EOF is returned.  

        EEXXAAMMPPLLEE The call: 

             int i, n; float x; char name[50];

             n = scanf("%d%f%s", &i, &x, name);

             with the input line: 25 54.32E-1 thompson

             assigns to n the value 3, to i the value 25, to x the value 5.432,
             and name will contain thompson.





                                                                




        SCANF(3C)        Kreider OS-9 C Library        SCANF(3C)


             Or:

             int i; float x; char name[50];

             scanf("%2d%f% %[0-9]", &i, &x, name);

             with input: 56789 0123 56a72 will assign 56 to i, 789.0 to x,
             skip 0123, and place the string 560 in
             _n_a_m_e .


             The next call to _g_e_t_c_h_a_r() will return _a .  For further 
             information, see getc .  

        CCAAVVEEAATTSS 

             The success of literal matches and suppressed assignments 
             is not directly determinable.  

             Trailing white space (including a new-line) is left unread 
             unless matched in the control string.  

        DDIIAAGGNNOOSSTTIICCSS 

             These functions return EOF on end of input and a short 
             count for missing or illegal data items.  

        SSEEEE AALLSSOO 

             atof(), getc(), printf()




























                                                                


