

        OS9FORK(3C)      Kreider OS-9 C Library      OS9FORK(3S)


        NNAAMMEE 

             os9fork - create a new process

        SSYYNNOOPPSSIISS 

             os9fork(modname, paramsize, parmamptr, type, lang, datasize)
             char *modname, paramptr;
             int paramsize, type, lang, datasize;

        DDEESSCCRRIIPPTTIIOONN 

             The action of FF$FFOORRKK, the assembler equivalent of OOSS99FFOORRKK 
             is fully described in the OS-9 System manual.  OOSS99FFOORRKK will 
             create a process that runs concurrently with the calling 
             process.  When the forked process terminates, it will 
             return to the calling process and pass back its exit 
             status.  

             _M_o_d_n_a_m_e should point to the name of the desired module.  
             _P_a_r_a_m_s_i_z_e is the length of the parameter string which 
             should always be terminated with a '\n', and _p_a_r_a_m_p_t_r 
             points to the parameter string itself.  _T_y_p_e is the module 
             type as found in the program header (normally a 1 for 
             "program"), and _l_a_n_g should match the language nibble in 
             the module header (C programs have a 1 for "6809 machine 
             language").  _D_a_t_a_s_i_z_e may be zero or it may contain the 
             number of 256 byte pages to give to the new process as its 
             initial memory allocation.  If it is zero, the new process' 
             memory allocation will be the amount specified in the 
             program header.  

        DDIIAAGGNNOOSSTTIICCSS 

             A -1 will be returned on an error, or the ID number of the 
             child process will be returned upon success.  

        EEXXAAMMPPLLEE 

             An example of typical usage would be:
             
             static int stat;
             char *status = &stat;
             
             fork(module, params)
             char *module, *params;
             {
                 os9fork (module, strlen(params), params, 1, 1, 0);
                 wait (status);
             }








                                                                


