

        GETSTAT(2S)      Kreider OS-9 C Library      GETSTAT(2S)


        NNAAMMEE 

             SS_OPT, SS_READY, SS_SIZE, SS_POS, SS_EOF, SS_DEVNAM, SS_FD

             OS-9 get status system calls.

        SSYYNNOOPPSSIISS 

             #include <sgstat.h>

             getstat(SS_OPT, filenum, buffer)
             int code, filenum;
             struct sgbuf *buffer;

             getstat(SS_READY, filenum)
             int code, filenum;

             getstat(SS_SIZE, filenum, size)
             int code, filenum;
             long *size;

             getstat(SS_POS, filenum, position)
             int code, filenum;
             long *position;

             getstat(SS_EOF, filenum)
             int code, filenum;

             getstat(SS_DEVNAM, filenum, buffer)
             int code, filenum;
             char *buffer;

             #include <direct.h>

             getstat(SS_FD, filenum, buffer, count)
             int code, filenum;
             struct fildes *buffer;
             int count;

        DDEESSCCRRIIPPTTIIOONN 

             These calls are the equivalent of the _GGSS_XXXXXX calls 
             described elsewhere in these documents.  While the _GGSS_XXXXXX 
             calls are provided for compatibility with source code 
             generated for OSK and UNIX systems, the calls listed below 
             are those normally used with 6809/OS-9.  

             The following descriptions do not include the complete 
             syntax of each function call.  See the list above under 
             Synopsis.  

             GGEETTSSTTAATT(ssss_oopptt) copies the options section of the path 
             descriptor opened on _p_a_t_h into the buffer pointer to by 
             _b_u_f_f_e_r.  The structure _s_g_b_u_f in SSGGSSTTAATT.HH provides a 




                                                                




        GETSTAT(2S)      Kreider OS-9 C Library      GETSTAT(2S)


             convenient means to access the individual option values.  

             Be sure the buffer is large enough to hold all the 
             options.  Declaring the buffer as a type _s_t_r_u_c_t _s_g_b_u_f is 
             perfectly safe as this structure is predefined to be large 
             enough for all the device descriptor options.  

             This call works only on RRBBFF devices.  

             GGEETTSSTTAATT(ssss_rreeaaddyy) checks an SSCCFF device opened on _p_a_t_h to 
             see if data is waiting to be read.  Read requests to OS9 
             will wait until enough bytes have been read to satisfy the 
             bytecount given thereby suspending the program until the 
             read is finished.  

             A program can use this function to determine the number of 
             bytes, if any, are waiting to be read, and then issue a 
             read request for only the number of bytes actually 
             received.  

             If no data is available to be read, or the device is not an 
             SSCCFF device, a -1 is returned and the appropriate error code 
             is placed in _e_r_r_n_o.  Otherwise, the number of bytes 
             available to be read is returned.  

             This call is effective only on SSCCFF devices.  This function 
             is not intended for use with buffered I/O calls (like 
             _g_e_t_c()), and unpredictable results will likely occur.  This 
             call works best with low-level I/O functions.  

             GGEETTSSTTAATT(ssss_ppooss) returns the value of the file pointer for 
             the file opened on _f_i_l_e_n_u_m.  

             If an error occurs, this function returns -1 as its value 
             and the error code is placed in the global variable _e_r_r_n_o.  

             This call works only on RRBBFF devices.  It is unique to OS-9 
             and the only equivalent portable call is _l_s_e_e_k().  DO NOT 
             use this call if buffered I/O is being performed on the 
             path.  Use _f_t_e_l_l() instead.  

             GGEETTSSTTAATT(ssss_eeooff) determines if the file opened is at the 
             end-of-file.  If it is, the value 1 is returned -- if not, 
             0 is returned.  

             If an error occurs, this function returns -1 as its value 
             and the error code is placed in the global variable _e_r_r_n_o.  

             This function cannot determine the end-of-file on an SSCCFF 
             device.  SSCCFF devices return an _e$_e_o_f error when the _E_O_F 
             character is read.  DO NOT use this call if using buffered 
             I/O on PATH. Instead, use the function _f_e_o_f().  






                                                                




        GETSTAT(2S)      Kreider OS-9 C Library      GETSTAT(2S)


             GGEETTSSTTAATT(ssss_ddeevvnnaamm) determines the name of the device opened 
             on a path.  The argument _f_i_l_e_n_u_m is the OS-9 path number of 
             the opened path and _b_u_f_f_e_r is a pointer to a character 
             array into which the null-terminated device name will be 
             placed.  

             If an error occurs, this function returns -1 as its value 
             and the error code is placed in the global variable _e_r_r_n_o.  

             Be sure to reserve at least 32 characters to receive the 
             device name.  

             GGEETTSSTTAATT(ssss_ffdd) places a copy of the RRBBFF file descriptor 
             sector of the file opened into the buffer pointed to by 
             _b_u_f_f_e_r.  A maximum of _c_o_u_n_t bytes are copied.  The 
             structure _F_I_L_D_E_S, declared in DDIIRREECCTT.HH, provides a 
             convenient method to access the file descriptor 
             information.  

             If and error occurs, this function returns -1 as its value 
             and the error code is placed in the global variable _e_r_r_n_o.  

             Be sure the buffer is large enough to hold all the options, 
             or at least _c_o_u_n_t bytes.  This call is effective only on 
             RRBBFF devices.  Declaring the buffer as type _s_t_r_u_c_t _f_i_l_d_e_s is 
             perfectly safe as this structure is predefined to be large 
             enough to hold all the file descriptor information.  

        NNOOTTEE 

             All the above calls require an OS-9 path number for 
             _f_i_l_e_n_u_m, _a_n_d _N_O_T _a C iob file descriptor pointer.  

        SSEEEE AALLSSOO 

             I$GetStt system call - Microware Manual, _gs_xxx calls






















                                                                


